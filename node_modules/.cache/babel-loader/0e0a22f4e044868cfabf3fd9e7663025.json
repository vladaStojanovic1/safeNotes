{"ast":null,"code":"import * as actions from '../types';\n/********* Add Note */\n\nexport const addNote = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firestore = getFirestore();\n  const userId = getState().firebase.auth.uid;\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.ADD_NOTE_START\n  });\n\n  try {\n    const res = await firestore.collection('notes').doc(userId).get();\n    const newNote = {\n      id: new Date().valueOf(),\n      todo: data.note,\n      date: new Date()\n    };\n\n    if (!res.data()) {\n      // If user not have note\n      firestore.collection('notes').doc(userId).set({\n        notes: [newNote]\n      });\n    } else {\n      //if user have note\n      firestore.collection('notes').doc(userId).update({\n        notes: [...res.data().notes, newNote]\n      });\n    }\n\n    dispatch({\n      type: actions.ADD_NOTE_SUCCESS\n    }); // return true;\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: actions.ADD_NOTE_FAIL,\n      payload: error.message\n    });\n  }\n};\n/******** Delete Note */\n\nexport const deleteNote = id => async (dispatch, getState, {\n  getFirestore\n}) => {\n  const firestore = getFirestore();\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.DELETE_NOTE_START\n  });\n\n  try {\n    const res = await firestore.collection('notes').doc(userId).get();\n    const previousTodo = res.data().notes; // filter old notes and return new arr\n\n    const newNotes = previousTodo.filter(note => note.id !== id);\n    await firestore.collection('notes').doc(userId).update({\n      notes: newNotes\n    });\n    dispatch({\n      type: actions.DELETE_NOTE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: actions.DELETE_NOTE_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/vlada1/Desktop/safeNotes/src/store/actions/noteAction.js"],"names":["actions","addNote","data","dispatch","getState","getFirebase","getFirestore","firestore","userId","firebase","auth","uid","type","ADD_NOTE_START","res","collection","doc","get","newNote","id","Date","valueOf","todo","note","date","set","notes","update","ADD_NOTE_SUCCESS","error","console","log","message","ADD_NOTE_FAIL","payload","deleteNote","DELETE_NOTE_START","previousTodo","newNotes","filter","DELETE_NOTE_SUCCESS","DELETE_NOTE_FAIL"],"mappings":"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","sourcesContent":["import * as actions from '../types';\n\n/********* Add Note */\nexport const addNote = (data) => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    const userId = getState().firebase.auth.uid;\n    const firebase = getFirebase();\n\n    dispatch({ type: actions.ADD_NOTE_START });\n\n    try {\n        const res = await firestore\n            .collection('notes')\n            .doc(userId)\n            .get();\n\n        const newNote = {\n            id: new Date().valueOf(),\n            todo: data.note,\n            date: new Date()\n        }\n\n        if (!res.data()) {\n            // If user not have note\n            firestore\n                .collection('notes')\n                .doc(userId)\n                .set({\n                    notes: [newNote]\n                })\n        } else {\n            //if user have note\n            firestore\n                .collection('notes')\n                .doc(userId)\n                .update({\n                    notes: [...res.data().notes, newNote]\n                })\n        }\n        dispatch({ type: actions.ADD_NOTE_SUCCESS });\n        // return true;\n\n    } catch (error) {\n        console.log(error.message);\n\n        dispatch({ type: actions.ADD_NOTE_FAIL, payload: error.message });\n    }\n}\n\n\n\n/******** Delete Note */\nexport const deleteNote = id => async (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.DELETE_NOTE_START });\n    try {\n        const res = await firestore\n            .collection('notes')\n            .doc(userId)\n            .get();\n\n        const previousTodo = res.data().notes;\n        // filter old notes and return new arr\n        const newNotes = previousTodo.filter(note => note.id !== id);\n\n        await firestore\n            .collection('notes')\n            .doc(userId)\n            .update({\n                notes: newNotes\n            })\n        dispatch({ type: actions.DELETE_NOTE_SUCCESS });\n    } catch (error) {\n        dispatch({ type: actions.DELETE_NOTE_FAIL, payload: error.message });\n    }\n}"]},"metadata":{},"sourceType":"module"}