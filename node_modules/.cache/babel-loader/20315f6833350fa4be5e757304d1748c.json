{"ast":null,"code":"import * as Yup from 'yup';\nexport const SignUpSchema = Yup.object().shape({\n  firstName: Yup.string().required('Name is required.').min(3, 'To short').max(25, 'To long.'),\n  lastName: Yup.string().required('Last name is required.').min(3, 'To short').max(25, 'To long.'),\n  email: Yup.string().email('Invalid email').required('The email is required'),\n  password: Yup.string().required('The password is required').min(8, 'The password is to short'),\n  confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], `Password doesn't match.`).required('You need to confirm your password')\n});\nexport const LoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('The email is required'),\n  password: Yup.string().required('The password is required').min(8, 'To short..')\n});\nexport const ProfileSchema = Yup.object().shape({\n  firstName: Yup.string().required('Your name is required.').min(3, 'To short').max(25, 'To long.'),\n  lastName: Yup.string().required('Your last name is required.').min(3, 'To short').max(25, 'To long.'),\n  email: Yup.string().email('Invalid email').required('The email is required'),\n  password: Yup.string().min(8, 'The password is to short'),\n  confirmPassword: Yup.string().when(\"password\", {\n    is: val => val && val.length > 0,\n    then: Yup.string().oneOf([Yup.ref(\"password\")], \"Both passwords need to be the same\").required()\n  })\n});\nexport const NotesSchema = Yup.object().shape({\n  note: Yup.string().required('The todo is required').min(4, 'To short.')\n});","map":{"version":3,"sources":["/home/vlada1/Desktop/safeNotes/src/Auth/ValidationSchemas/index.js"],"names":["Yup","SignUpSchema","object","shape","firstName","string","required","min","max","lastName","email","password","confirmPassword","oneOf","ref","LoginSchema","ProfileSchema","when","is","val","length","then","NotesSchema","note"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAGA,OAAO,MAAMC,YAAY,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,SAAS,EAAEJ,GAAG,CAACK,MAAJ,GACNC,QADM,CACG,mBADH,EAENC,GAFM,CAEF,CAFE,EAEC,UAFD,EAGNC,GAHM,CAGF,EAHE,EAGE,UAHF,CADgC;AAK3CC,EAAAA,QAAQ,EAAET,GAAG,CAACK,MAAJ,GACLC,QADK,CACI,wBADJ,EAELC,GAFK,CAED,CAFC,EAEE,UAFF,EAGLC,GAHK,CAGD,EAHC,EAGG,UAHH,CALiC;AAS3CE,EAAAA,KAAK,EAAEV,GAAG,CAACK,MAAJ,GACFK,KADE,CACI,eADJ,EAEFJ,QAFE,CAEO,uBAFP,CAToC;AAY3CK,EAAAA,QAAQ,EAAEX,GAAG,CAACK,MAAJ,GACLC,QADK,CACI,0BADJ,EAELC,GAFK,CAED,CAFC,EAEE,0BAFF,CAZiC;AAe3CK,EAAAA,eAAe,EAAEZ,GAAG,CAACK,MAAJ,GACZQ,KADY,CACN,CAACb,GAAG,CAACc,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADM,EACwB,yBADxB,EAEZR,QAFY,CAEH,mCAFG;AAf0B,CAAnB,CAArB;AAqBP,OAAO,MAAMS,WAAW,GAAGf,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC1CO,EAAAA,KAAK,EAAEV,GAAG,CAACK,MAAJ,GACFK,KADE,CACI,eADJ,EAEFJ,QAFE,CAEO,uBAFP,CADmC;AAI1CK,EAAAA,QAAQ,EAAEX,GAAG,CAACK,MAAJ,GACLC,QADK,CACI,0BADJ,EAELC,GAFK,CAED,CAFC,EAEE,YAFF;AAJgC,CAAnB,CAApB;AASP,OAAO,MAAMS,aAAa,GAAGhB,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC5CC,EAAAA,SAAS,EAAEJ,GAAG,CAACK,MAAJ,GACNC,QADM,CACG,wBADH,EAENC,GAFM,CAEF,CAFE,EAEC,UAFD,EAGNC,GAHM,CAGF,EAHE,EAGE,UAHF,CADiC;AAK5CC,EAAAA,QAAQ,EAAET,GAAG,CAACK,MAAJ,GACLC,QADK,CACI,6BADJ,EAELC,GAFK,CAED,CAFC,EAEE,UAFF,EAGLC,GAHK,CAGD,EAHC,EAGG,UAHH,CALkC;AAS5CE,EAAAA,KAAK,EAAEV,GAAG,CAACK,MAAJ,GACFK,KADE,CACI,eADJ,EAEFJ,QAFE,CAEO,uBAFP,CATqC;AAY5CK,EAAAA,QAAQ,EAAEX,GAAG,CAACK,MAAJ,GACLE,GADK,CACD,CADC,EACE,0BADF,CAZkC;AAc5CK,EAAAA,eAAe,EAAEZ,GAAG,CAACK,MAAJ,GACZY,IADY,CACP,UADO,EACK;AACdC,IAAAA,EAAE,EAAEC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACC,MAAJ,GAAa,CADjB;AAEdC,IAAAA,IAAI,EAAErB,GAAG,CAACK,MAAJ,GACDQ,KADC,CACK,CAACb,GAAG,CAACc,GAAJ,CAAQ,UAAR,CAAD,CADL,EAC4B,oCAD5B,EAEDR,QAFC;AAFQ,GADL;AAd2B,CAAnB,CAAtB;AAwBP,OAAO,MAAMgB,WAAW,GAAGtB,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC1CoB,EAAAA,IAAI,EAAEvB,GAAG,CAACK,MAAJ,GACDC,QADC,CACQ,sBADR,EAEDC,GAFC,CAEG,CAFH,EAEM,WAFN;AADoC,CAAnB,CAApB","sourcesContent":["import * as Yup from 'yup';\n\n\nexport const SignUpSchema = Yup.object().shape({\n    firstName: Yup.string()\n        .required('Name is required.')\n        .min(3, 'To short')\n        .max(25, 'To long.'),\n    lastName: Yup.string()\n        .required('Last name is required.')\n        .min(3, 'To short')\n        .max(25, 'To long.'),\n    email: Yup.string()\n        .email('Invalid email')\n        .required('The email is required'),\n    password: Yup.string()\n        .required('The password is required')\n        .min(8, 'The password is to short'),\n    confirmPassword: Yup.string()\n        .oneOf([Yup.ref('password'), null], `Password doesn't match.`)\n        .required('You need to confirm your password')\n})\n\n\nexport const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n        .email('Invalid email')\n        .required('The email is required'),\n    password: Yup.string()\n        .required('The password is required')\n        .min(8, 'To short..')\n})\n\nexport const ProfileSchema = Yup.object().shape({\n    firstName: Yup.string()\n        .required('Your name is required.')\n        .min(3, 'To short')\n        .max(25, 'To long.'),\n    lastName: Yup.string()\n        .required('Your last name is required.')\n        .min(3, 'To short')\n        .max(25, 'To long.'),\n    email: Yup.string()\n        .email('Invalid email')\n        .required('The email is required'),\n    password: Yup.string()\n        .min(8, 'The password is to short'),\n    confirmPassword: Yup.string()\n        .when(\"password\", {\n            is: val => val && val.length > 0,\n            then: Yup.string()\n                .oneOf([Yup.ref(\"password\")], \"Both passwords need to be the same\")\n                .required()\n        }),\n})\n\n\nexport const NotesSchema = Yup.object().shape({\n    note: Yup.string()\n        .required('The todo is required')\n        .min(4, 'To short.')\n})"]},"metadata":{},"sourceType":"module"}